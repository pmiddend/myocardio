* Ranking Algorithm, v1

** Description of the problem

The ranking algorithm in myocardio operates on “exercises”. In nonformal language an exercise has

1. a time when it was were last executed, which might be “never”
2. a list of associated muscles involved (with every muscle involved to the same degree)

To model this mathematically, assume we have a (finite) set $\textbf{Muscle}$ of muscles. For example:

\begin{equation}
\textbf{Muscle} = \{ \text{biceps}, \text{triceps} \}
\end{equation}

We’d like to model a point in time as a value from $\mathbb{N}$, the natural numbers. But we have to deal with the special value “never”. So, we define $T = \mathbb{N} \cup \{\bot\}$, where $\bot$ stands for this special value. This makes $T$ a set that is not a ring anymore, it’s not even ordered.

Modeling all possible exercises as simply

\begin{equation}
E = \mathcal{P}(\textbf{Muscle})
\end{equation}

where $\mathcal{P}$ is the powerset operator — doesn’t work, though, because you might have two exercises which have the same muscle groups but aren’t the same.

So we assume another (finite) set $\textbf{Exercise}$ of exercise /names/. We then assign two functions

\(
m \colon \textbf{Exercise} \to \mathcal{P}(\textbf{Muscle})
\)

descibing the muscles of an exercise and

\(
\ell \colon \textbf{Exercise} \to T
\)

describing the latest execution time point.

The *input* of the algorithm is the three-tuple $(\textbf{Exercise}, m, l)$. Its *output* should be a *reordering of the exercises*, which we can model with a function $o: \mathbb{N} \to \textbf{Exercise}$.

** Rankings

We define two /rankings/ for an exercise. One ranks by /time/ $\rho_t$ and one by /complexity/ $\rho_c$ (i.e. the number of muscles involved).

Ranking by complexity is easy: $\rho_c(e) = |m(e)|$, it’s just the number of muscles involved. More muscles equals a better ranking.

Ranking by time is a bit more complicated. We want to interpolate all exercises’ times by the latest/oldest one. However, we cannot interpolate across $T$ because we have no ordering (because of the special element $\bot$).

To fix this, we model $\rho_t$ as follows:

1. $\rho_t(e)=0$ for all $e \in \textbf{Exercise}$ if $\bot \in \ell(\textbf{Exercise})$. Meaning the ranking is moot if one of the exercises has never been performed.
2. Otherwise determine the minimum and maximum time stamps: $l_{\text{min}}, l_{\text{max}}$ (which is now well-defined). Linearly interpolate between the two and rescale to [0,100].

This gives exercises that were just executed a low ranking (i.e. close to 0) and exercises that weren’t performed recently higher ones (more towards 100).

The total ranking for an exercise is simply \( \rho(e) = \rho_t(e) + \rho_c(e) \)

** Greedy Algorithm, imperative

We could now just rank all our exercises by $\rho$. However, two exercises that feature the same or similar muscle groups could be included back-to-back in this plan, and that’s a non-goal.

In order to rank the exercises, we employ a greedy algorithm in order to construct an order $o_i$ for exercises (where $i \in \mathbb{N}$). We assume $|\textbf{Exercise}| \geq 2$.

1. Let $i=0$. Take the exercise $e_i=\text{argmax}_{e \in \textbf{Exercise}} \{ \rho(e) \}$ with the highest ranking. Define $o_i=e_i$ Define the rest $R_i=\textbf{Exercise} \setminus \{o_i\}$
2. If $|R_i| = \{ e \}$ for some $e \in \textbf{Exercise}$, choose $o_{i+1}=e$ and terminate.
3. Define $d_i: R_i \to \mathbb{N}$ as $d_i(e) = |m(e) \cap m(o_i)|$. This is a ranking of how many muscle groups are the same as the first exercise (d for “Durchschnitt”, meaning intersection in German).
4. Define $D_i: \mathbb{N} \to \mathcal{P}(R_i)$ as
   \begin{equation}
   D_i(n) = \{e \in R_i \mid d_i(e) = n\}
   \end{equation}
   This is a ranking of how many muscle groups are the same as the first exercise.
5. Define $N_i = \text{argmin}_{n \in \mathbb{N}} \{ D_i(n) \mid D_i(n) \neq \emptyset \}$. Thus, $D_i(N_i)$ will be the group of exercises with the least number of muscles in common with the chosen one, $o_i$. This exists, because we assumed to have at least one exercise left in step 2, and even if all exercises have all muscles in common, we will have a group for them.
6. From $D_i(N_i)$, choose the exercise with the highest rank $\rho$ as the next exercise $o_{i+1}$. Define $R_{i+1}=R_i \setminus \{ o_{i+1} \}$. Go to step 2 (reindexing $i \to i+1$).

This algorithm will terminate after at most $|\textbf{Exercise}|$ steps, since $|R_i|$ is stricly monotonically decreasing as $i$ increases.
